2019 paper: https://www.sciencedirect.com/science/article/pii/S0021999118307125?via%3Dihub

Video on PINNs: https://www.youtube.com/watch?v=-zrY7P2dVC4

From the video: simulation of a spring is easy, maybe implement that at first

Blog describing the spring case: https://benmoseley.blog/my-research/so-what-is-a-physics-informed-neural-network/
example of the spring case: https://github.com/benmoseley/harmonic-oscillator-pinn/blob/main/Harmonic%20oscillator%20PINN.ipynb (from the blog)

Failure modes, possible fixes if the training doesn't go well: https://arxiv.org/abs/2109.01050

For the Poiseuille sim: Plane Poiseuille flow?
Poiseuille flow in different cases: https://en.wikipedia.org/wiki/Hagen%E2%80%93Poiseuille_equation

For Karman: We just take a "screenshot" of a system at a certain time?

Navier-Stokes : Video explaining what they are https://www.youtube.com/watch?v=Ra7aQlenTb8

Vector field divergeance : 3:00 in the vid

we have to create the physical loss function from the Navier-Stokes equation, with conservation of mass 
∇ • u = 0, 
with u the velocity vector field and ∇ • the divergeance

and conservation of momentum (Newton's second law rewritten)
ρ (du/dt) = -∇p + μ ∇²u + F, 
with ρ the density, p the pressure, μ the viscosity, u the velocity vector field and F other forces that might apply (usually gravity, do we ignore it?)

Navier stokes PINN img from wikipedia https://en.wikipedia.org/wiki/Physics-informed_neural_networks

We want to find the correct PDE for the different cases, the we can use pytorch's autograd function to compute the residual of the differential equation
